% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/collection.R
\name{add_spectrum}
\alias{add_spectrum}
\alias{add_spectrum.collection}
\title{Add a single spectrum to a collection object}
\usage{
add_spectrum(x, ...)

\method{add_spectrum}{collection}(
  x,
  values,
  left,
  right,
  id = deparse(substitute(values)),
  label = NA,
  ...
)
}
\arguments{
\item{x}{A \code{collection} object.}

\item{...}{further arguments passed to or from other methods(not
currenctly used).}

\item{values}{A vector of intensity values.}

\item{left}{A dbl, left limit of the spectra, corresponds to the
first element of \code{values}}

\item{right}{A dbl, right limit of the spectra, corresponds to the
last element of \code{values}}

\item{id}{A unique identifier for the sample.}

\item{label}{A label for the sample.}
}
\value{
An updated version of \code{x}.
}
\description{
Adds an new entry to an existing colleciton object.
}
\details{
It is assumed that the binning is uniform and correspond
to point measurments.

Be careful with the values of \code{left}and \code{right}! THis is important
for example for NMR data which are usually given with a reversed
y-axis.

\code{labels} should be used to provide meanigful labels to the samples, e.g.
'treated' and 'control'.

It is recommended to populate a collection using \code{purrr::walk}
on a list of files (see example).
}
\examples{

####################################################################

# A simple example: adding a spectra from a vector of values:
library(tidySpectR)

# Genearating some values
values = runif(50)
left = 0
right = 49

# Collection is empty on creation
coll = collection()

# Adding the data
coll \%>\% 
    add_spectrum(values, left, right, id = "basic_example", label = "test")

####################################################################
\dontrun{
# Real life example: parsing data form file and adding them to a 
# collection on the fly
library(purrr)

# Generate a list of file paths for a folder containing spectra data files
folder_path <- "path/to/data/folder"
files <- file.path(folder_path, list.files(folder_path))

# Create a collection and add the spectra
coll <- collection()
purrr::walk(files,
              function(x){
                  # Parse your files to extract values, limits and ids
                  # ...
                  coll <<- coll \%>\% 
                           add_spectrum(values, left, right, id)
              })
}
}
