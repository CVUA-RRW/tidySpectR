% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{reduce_resolution}
\alias{reduce_resolution}
\alias{reduce_resolution.collection}
\title{Reduce the resolution of Spectra}
\usage{
reduce_resolution(x, ...)

\method{reduce_resolution}{collection}(x, k, ...)
}
\arguments{
\item{x}{A\code{collection} object to normalize}

\item{...}{further arguments passed to or from other methods(not
currently used).}

\item{k}{an integer expressing the reduction in resolution.
For example \code{k=2}will keep every second point, \code{k=3} every third.}
}
\description{
Reduce the resolution of Spectra
}
\note{
Reducing resolution of the spectra before computation intensive steps
like AI binning can significantly improve their speed, while minimally affecting the output.

You should however be careful with the choice of k and in the caase of subsequent binning
make sure to remove the outter limits of the returned results as these will not match
the outter limits of the full resolution spectra.
}
\examples{
library(tidySpectR)
# Speeding up AI binning
reduced <- reduce_resolution(fa_nmr, k=2)
binned <- bucket_aibin(extract(reduced,0.5, 7.2), 
                       0.5, 
                       mask(reduced, -Inf, 8))
breaks <- pull_breaks(binned)

# last break does not match spectra limit, leaving it so would create 
# a bin at the ends of the spectra
breaks[1]
breaks[length(breaks)]
pull_limits(fa_nmr)

breaks <- breaks[-1] # remove first break
breaks <- breaks[-length(breaks)] # remove last break
processed <- bucket_from_breaks(fa_nmr, breaks)

# Full resolution bucketted spectra
processed
}
